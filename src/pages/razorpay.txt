import React, { useState } from 'react';

const BookingComponent = ({ user, vehicle }) => {
  const [bookingStart, setBookingStart] = useState('');
  const [bookingEnd, setBookingEnd] = useState('');
  const [message, setMessage] = useState('');

  async function loadRazorpayScript() {
    return new Promise((resolve) => {
      const script = document.createElement('script');
      script.src = 'https://checkout.razorpay.com/v1/checkout.js';
      script.onload = () => resolve(true);
      script.onerror = () => resolve(false);
      document.body.appendChild(script);
    });
  }

  async function createOrder() {
    const response = await fetch('http://localhost:4000/api/create-razorpay-order', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ vehicleId: vehicle._id, bookingStart, bookingEnd }),
    });
    return response.json();
  }

  async function handlePayment() {
    if (!bookingStart || !bookingEnd) {
      setMessage('Please select booking dates');
      return;
    }

    const isLoaded = await loadRazorpayScript();

    if (!isLoaded) {
      alert('Failed to load Razorpay SDK');
      return;
    }

    // Get Razorpay order info from backend
    const order = await createOrder();

    const options = {
      key: 'YOUR_RAZORPAY_KEY_ID',
      amount: order.amount,
      currency: order.currency,
      name: 'Vehicle Booking',
      description: vehicle.name,
      order_id: order.razorpayOrderId,
      handler: async function (response) {
        // Payment success: verify payment with backend
        const verifyRes = await fetch('http://localhost:4000/api/verify-payment', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            userId: user._id,
            vehicleId: vehicle._id,
            bookingStart,
            bookingEnd,
            amount: order.amount,
            razorpayOrderId: response.razorpay_order_id,
            razorpayPaymentId: response.razorpay_payment_id,
            razorpaySignature: response.razorpay_signature,
          }),
        });
        const verifyData = await verifyRes.json();

        if (verifyData.success) {
          setMessage('Payment successful and order created!');
        } else {
          setMessage('Payment verification failed!');
        }
      },
      prefill: {
        name: user.name,
        email: user.email,
        contact: user.mobileNo,
      },
      theme: {
        color: '#3399cc',
      },
    };

    const rzp = new window.Razorpay(options);
    rzp.open();
  }

  return (
    <div>
      <h2>Book Vehicle: {vehicle.name}</h2>
      <input
        type="datetime-local"
        value={bookingStart}
        onChange={(e) => setBookingStart(e.target.value)}
        placeholder="Booking Start"
      />
      <br />
      <input
        type="datetime-local"
        value={bookingEnd}
        onChange={(e) => setBookingEnd(e.target.value)}
        placeholder="Booking End"
      />
      <br />
      <button onClick={handlePayment}>Pay & Book</button>

      {message && <p>{message}</p>}
    </div>
  );
};

export default BookingComponent;
