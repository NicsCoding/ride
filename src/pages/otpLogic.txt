// implementing handle change 
const handleChange = (element, index) => {
        const value = element.value;
        if (!pattern.test(value)) return; // Only allow digits

        let newOtp = [...otp];
        newOtp[index] = value;

        setOtp(newOtp);

        // Move to the next input field
        if (value && index < length - 1) {
            inputs[index + 1].focus();
        }
    };
// handling paste 
const handlePaste = (e) => {
        e.preventDefault();
        const paste = e.clipboardData.getData("text");
        if (!pattern.test(paste)) return; // Only allow digits

        const newOtp = paste.slice(0, length).split("");
        for (let i = 0; i < length; i++) {
            inputs[i].value = newOtp[i] || "";

            if (newOtp[i] && i < length - 1) {
                inputs[i + 1].focus();
            }
        }
        setOtp(newOtp);
    };
// handling delete  const handleKeyDown = (e, index) => {
        if (e.key === "Backspace") {
            e.preventDefault();
            let newOtp = [...otp];
            newOtp[index] = "";
            setOtp(newOtp);

            if (index > 0) {
                inputs[index - 1].focus();
            }
        } else if (e.key === "ArrowLeft" && index > 0) {
            inputs[index - 1].focus();
        } else if (e.key === "ArrowRight" && index < length - 1) {
            inputs[index + 1].focus();
        }
    };

// Previous Logic 
const handleChange = (value: string, index: number) => {
    if (!/^\d*$/.test(value)) return; // allow only digits
    const newOtp = [...otp];
    newOtp[index] = value;
    setOtp(newOtp);

    if (value && index < 5) inputsRef.current[index + 1]?.focus();
    if (index === 5 && value) verifyOtp(newOtp.join(""));
  };

  const handleKeyDown = (
    e: React.KeyboardEvent<HTMLInputElement>,
    index: number
  ) => {
    if (e.key === "Backspace" && !otp[index] && index > 0) {
      inputsRef.current[index - 1]?.focus();
    }
  };

  const handlePaste = (e: React.ClipboardEvent<HTMLInputElement>) => {
    e.preventDefault();
    const paste = e.clipboardData.getData("text").slice(0, 6).split("");
    const newOtp = [...otp];
    paste.forEach((digit, i) => (newOtp[i] = digit));
    setOtp(newOtp);

    const lastIndex = Math.min(paste.length, 6) - 1;
    inputsRef.current[lastIndex]?.focus();
  };

  const verifyOtp = (finalOtp: string) => {
    if (finalOtp.length < 6) return;
    console.log("Verifying OTP:", finalOtp);
    // 🚨 Send to backend API here
  };
// old logic
dingAvailableBikes: (state, action: PayloadAction<string>) => { // console.log(action.payload); const pickupDate = action.payload.pickUpdate; const pickUptime = action.payload.pickUptime; const dropOffDate = action.payload.dropOffDate; const dropOffTime = action.payload.dropOffTime; // bookedSlots: [ // { // pickUpDate: "", // dropOffDate: "", // pickUpTime: "", // dropOffTime: "", // }, state.availableBikes = state.all.filter((item) => item.bookedSlots.some( (slot) => slot.pickUpDate !== pickupDate && slot.dropOffTime !== dropOffTime ) );

  // newLogic 

  addingAvailableBikes: (
      state,
      action: PayloadAction<{
        pickUpDate: string;
        pickUpTime: string;
        dropOffDate: string;
        dropOffTime: string;
      }>
    ) => {
      const { pickUpDate, pickUpTime, dropOffDate, dropOffTime } =
        action.payload;

      // Convert requested booking into Date objects
      const newStart = new Date(`${pickUpDate} ${pickUpTime}`);
      const newEnd = new Date(`${dropOffDate} ${dropOffTime}`);

      state.availableBikes = state.all.filter((item) => {
        // Case: no bookings or just [{}] → available
        if (
          item.bookedSlots.length === 0

          //|| (item.bookedSlots.length === 1 &&
          //   Object.keys(item.bookedSlots[0]).length === 0)
        ) {
          return true;
        }

        // Check if any existing slot conflicts
        const hasConflict = item.bookedSlots.some((slot) => {
          if (!slot.pickUpDate || !slot.dropOffDate) {
            return false; // skip invalid slots
          }

          // const existingStart = new Date(
          //   `${slot.pickUpDate} ${slot.pickUpTime}`
          // );
          // const existingEnd = new Date(
          //   `${slot.dropOffDate} ${slot.dropOffTime}`
          // );

          // Overlap condition
          // return newStart < existingEnd && newEnd > existingStart;
        });

        // Keep only vehicles WITHOUT conflicts
        // return !hasConflict;
      });
    },

    /only for dates
    addingAvailableBikes: (
  state,
  action: PayloadAction<{ pickUpDate: string; dropOffDate: string }>
) => {
  const { pickUpDate, dropOffDate } = action.payload;

  state.availableBikes = state.all.filter((vehicle) => {
    // Case 1: No bookings or just [{}]
    if (
      vehicle.bookedSlots.length === 0 ||
      (vehicle.bookedSlots.length === 1 && Object.keys(vehicle.bookedSlots[0]).length === 0)
    ) {
      return true;
    }

    // Case 2: Check for conflicts
    const hasConflict = vehicle.bookedSlots.some((slot) => {
      if (!slot.pickUpDate || !slot.dropOffDate) return false;

      // Overlap check (date-only)
      return pickUpDate <= slot.dropOffDate && dropOffDate >= slot.pickUpDate;
    });

    // Keep vehicle only if there is NO conflict
    return !hasConflict;
  });
}


// second last logic
// Create Date objects for new booking
      const newStart = new Date(`${pickUpDate}T${pickUpTime}`);
      const newEnd = new Date(`${dropOffDate}T${dropOffTime}`);

      state.availableBikes = state.all.filter((vehicle) => {
        // Case 1: No bookings or just [{}]
        if (
          vehicle.bookedSlots.length === 0 ||
          (vehicle.bookedSlots.length === 1 &&
            Object.keys(vehicle.bookedSlots[0]).length === 0)
        ) {
          return true;
        }

        // Case 2: Check for conflicts
        const hasConflict = vehicle.bookedSlots.some((slot) => {
          if (
            !slot.pickUpDate ||
            !slot.dropOffDate ||
            !slot.pickUpTime ||
            !slot.dropOffTime
          ) {
            return false; // skip invalid slots
          }

          const existingStart = new Date(
            `${slot.pickUpDate}T${slot.pickUpTime}`
          );
          const existingEnd = new Date(
            `${slot.dropOffDate}T${slot.dropOffTime}`
          );

          // Overlap check
          return newStart < existingEnd && newEnd > existingStart;
        });

        return !hasConflict;
      });



import React, { useState } from "react";
import {
  IoChevronDown,
  IoChevronForward,
  IoShield,
  // IoPersonCheckmark,
  IoLockClosed,
  IoDocumentText,
  IoOpenOutline,
  IoPerson,
  IoRefresh,
  IoMail,
  IoInformationCircle,
  IoEye,
  // IoCreditCard,
  IoLocationSharp,
  IoCall,
} from "react-icons/io5";

interface ExpandedSections {
  [key: string]: boolean;
}

interface SectionConfig {
  id: string;
  title: string;
  icon: React.ComponentType<{ size?: number; className?: string }>;
  color: "orange" | "blue" | "green" | "purple" | "red" | "indigo";
}

const PrivacyPolicy: React.FC = () => {
  const [expandedSections, setExpandedSections] = useState<ExpandedSections>(
    {}
  );
  const [activeSection, setActiveSection] = useState<string>("");

  const toggleSection = (sectionId: string): void => {
    setExpandedSections((prev) => ({
      ...prev,
      [sectionId]: !prev[sectionId],
    }));
  };

  const scrollToSection = (sectionId: string): void => {
    setActiveSection(sectionId);
    const element = document.getElementById(sectionId);
    if (element) {
      element.scrollIntoView({ behavior: "smooth" });
    }
  };

  type ColorKeys = "orange" | "blue" | "green" | "purple" | "red" | "indigo";

  interface SectionCardProps {
    id: string;
    title: string;
    icon: React.ComponentType<{ size?: number; className?: string }>;
    children: React.ReactNode;
    color?: ColorKeys;
  }

  const SectionCard: React.FC<SectionCardProps> = ({
    id,
    title,
    icon: Icon,
    children,
    color = "orange",
  }) => {
    const isExpanded = expandedSections[id] || false;

    const colorClasses: Record<ColorKeys, string> = {
      orange: "bg-orange-50 border-orange-200 hover:border-orange-300",
      blue: "bg-blue-50 border-blue-200 hover:border-blue-300",
      green: "bg-green-50 border-green-200 hover:border-green-300",
      purple: "bg-purple-50 border-purple-200 hover:border-purple-300",
      red: "bg-red-50 border-red-200 hover:border-red-300",
      indigo: "bg-indigo-50 border-indigo-200 hover:border-indigo-300",
    };

    const iconColors: Record<ColorKeys, string> = {
      orange: "text-orange-600",
      blue: "text-blue-600",
      green: "text-green-600",
      purple: "text-purple-600",
      red: "text-red-600",
      indigo: "text-indigo-600",
    };

    return (
      <div
        id={id}
        className={`mb-6 bg-white rounded-lg border-2 ${colorClasses[color]} transition-all duration-300 shadow-sm hover:shadow-md`}
      >
        <button
          onClick={() => toggleSection(id)}
          className="w-full p-6 text-left flex items-center justify-between hover:bg-gray-50 rounded-t-lg transition-colors duration-200"
        >
          <div className="flex items-center space-x-4">
            <div
              className={`p-3 rounded-full bg-white border-2 ${iconColors[color]}`}
            >
              <Icon size={24} />
            </div>
            <h2 className="text-xl font-semibold text-gray-800">{title}</h2>
          </div>
          <div className="flex items-center space-x-2">
            <span className="text-sm text-gray-500">
              {isExpanded ? "Hide" : "Show"} Details
            </span>
            {isExpanded ? (
              <IoChevronDown size={20} />
            ) : (
              <IoChevronForward size={20} />
            )}
          </div>
        </button>

        <div
          className={`transition-all duration-300 ease-in-out overflow-hidden ${
            isExpanded ? "max-h-screen opacity-100" : "max-h-0 opacity-0"
          }`}
        >
          <div className="p-6 pt-0 border-t border-gray-100">{children}</div>
        </div>
      </div>
    );
  };

  interface InfoCardProps {
    icon: React.ComponentType<{ size?: number; className?: string }>;
    title: string;
    description: string;
  }

  const InfoCard: React.FC<InfoCardProps> = ({
    icon: Icon,
    title,
    description,
  }) => (
    <div className="flex items-start space-x-3 p-4 bg-gray-50 rounded-lg border border-gray-200">
      <Icon size={20} className="text-orange-600 mt-1 flex-shrink-0" />
      <div>
        <h4 className="font-medium text-gray-800 mb-1">{title}</h4>
        <p className="text-sm text-gray-600">{description}</p>
      </div>
    </div>
  );

  const sections: SectionConfig[] = [
    {
      id: "information-collect",
      title: "Information We Collect",
      icon: IoInformationCircle,
      color: "orange",
    },
    // {
    //   id: "how-use",
    //   title: "How We Use Your Information",
    //   icon: IoPersonCheckmark,
    //   color: "blue",
    // },
    {
      id: "data-security",
      title: "Data Security",
      icon: IoLockClosed,
      color: "green",
    },
    {
      id: "your-rights",
      title: "Your Rights",
      icon: IoShield,
      color: "purple",
    },
    {
      id: "third-party",
      title: "Third-Party Links",
      icon: IoOpenOutline,
      color: "indigo",
    },
    {
      id: "children",
      title: "Children's Privacy",
      icon: IoPerson,
      color: "red",
    },
    {
      id: "changes to",
      title: "Changes to this  Policy",
      icon: IoRefresh,
      color: "orange",
    },
    { id: "contact", title: "Contact Us", icon: IoMail, color: "blue" },
  ];

  return (
    <div className="min-h-screen bg-gradient-to-br from-orange-50 via-white to-orange-50">
      {/* Hero Section */}
      <div className="bg-gradient-to-r from-orange-500 to-orange-400 text-white py-16">
        <div className="max-w-4xl mx-auto px-6 text-center">
          <div className="inline-flex items-center justify-center w-16 h-16 bg-white bg-opacity-20 rounded-full mb-6">
            <IoShield size={32} />
          </div>
          <h1 className="text-4xl font-bold mb-4">Privacy Policy</h1>
          <p className="text-xl text-orange-100 mb-6">
            Your privacy is important to us. Learn how we collect, use, and
            protect your data.
          </p>
          <div className="bg-white bg-opacity-100 rounded-lg p-4 max-w-2xl mx-auto">
            <p className="text-sm text-black">
              <strong>Last Updated:</strong> April 1, 2024 |
              <strong className="ml-2">Effective Date:</strong> April 1, 2024
            </p>
          </div>
        </div>
      </div>

      {/* Navigation */}
      <div className="bg-white shadow-sm sticky top-0 z-10 border-b border-gray-200">
        <div className="max-w-4xl mx-auto px-6 py-4">
          <div className="flex flex-wrap gap-2">
            {sections.map((section) => (
              <button
                key={section.id}
                onClick={() => scrollToSection(section.id)}
                className={`px-4 py-2 rounded-full text-sm font-medium transition-colors duration-200 ${
                  activeSection === section.id
                    ? "bg-orange-100 text-orange-700 border border-orange-200"
                    : "bg-gray-100 text-gray-600 hover:bg-gray-200"
                }`}
              >
                {section.title}
              </button>
            ))}
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="max-w-4xl mx-auto px-6 py-12">
        {/* Quick Summary */}
        <div className="mb-12 bg-white rounded-xl p-8 shadow-md border border-orange-100">
          <h2 className="text-2xl font-bold text-gray-800 mb-6 text-center">
            Privacy at a Glance
          </h2>
          <div className="grid md:grid-cols-2 gap-6">
            <InfoCard
              icon={IoEye}
              title="What We Collect"
              description="Personal details, payment info, ride history, and device data to provide our services."
            />
            <InfoCard
              icon={IoShield}
              title="How We Protect"
              description="Industry-standard encryption and security measures to keep your data safe."
            />
            {/* <InfoCard
              icon={IoPersonCheckmark}
              title="Your Control"
              description="Access, update, or delete your data anytime. You have full control over your privacy."
            /> */}
            <InfoCard
              icon={IoDocumentText}
              title="Transparency"
              description="Clear explanations of our practices with no hidden clauses or complicated language."
            />
          </div>
        </div>

        {/* Expandable Sections */}
        <SectionCard
          id="information-collect"
          title="Information We Collect"
          icon={IoInformationCircle}
          color="orange"
        >
          <div className="space-y-6">
            <p className="text-gray-700 leading-relaxed">
              We collect information to provide you with the best bike and
              scooter rental experience. Here's what we gather:
            </p>

            <div className="grid gap-4">
              {/* <div className="flex items-start space-x-3 p-4 bg-orange-50 rounded-lg">
                <IoPersonCheckmark size={20} className="text-orange-600 mt-1" />
                <div>
                  <h4 className="font-medium text-gray-800 mb-2">
                    Personal Information
                  </h4>
                  <p className="text-gray-600 text-sm mb-2">
                    Name, email address, phone number, and other contact details
                    you provide.
                  </p>
                </div>
              </div> */}

              {/* <div className="flex items-start space-x-3 p-4 bg-orange-50 rounded-lg">
                <IoCreditCard size={20} className="text-orange-600 mt-1" />
                <div>
                  <h4 className="font-medium text-gray-800 mb-2">
                    Payment Information
                  </h4>
                  <p className="text-gray-600 text-sm mb-2">
                    Credit/debit card information, billing address, and
                    transaction details when you make a payment.
                  </p>
                </div>
              </div> */}

              <div className="flex items-start space-x-3 p-4 bg-orange-50 rounded-lg">
                <IoLocationSharp size={20} className="text-orange-600 mt-1" />
                <div>
                  <h4 className="font-medium text-gray-800 mb-2">
                    Ride Information
                  </h4>
                  <p className="text-gray-600 text-sm mb-2">
                    Ride history, rental dates/times, pickup/drop-off locations,
                    and vehicle preference.
                  </p>
                </div>
              </div>

              <div className="flex items-start space-x-3 p-4 bg-orange-50 rounded-lg">
                <IoDocumentText size={20} className="text-orange-600 mt-1" />
                <div>
                  <h4 className="font-medium text-gray-800 mb-2">
                    Technical Information
                  </h4>
                  <p className="text-gray-600 text-sm mb-2">
                    IP address, browser type, device information, and cookies
                    usage data.
                  </p>
                </div>
              </div>
            </div>
          </div>
        </SectionCard>

        {/* <SectionCard
          id="how-use"
          title="How We Use Your Information"
          icon={IoPersonCheckmark}
          color="blue"
        >
          <div className="space-y-4">
            <p className="text-gray-700 leading-relaxed mb-6">
              We use your information to provide, improve, and secure our
              bike/scooter rental services:
            </p>

            <div className="space-y-3">
              {[
                "To provide, operate, and improve our bike/scooter rental services.",
                "To process and secure your payments and rentals.",
                "To communicate booking confirmations, updates, and customer support information.",
                "To send promotional offers or newsletters if you opt in.",
                "To comply with legal and regulatory requirements.",
              ].map((text, i) => (
                <div
                  key={i}
                  className="flex items-center space-x-3 p-3 bg-blue-50 rounded-lg"
                >
                  <div className="w-2 h-2 bg-blue-500 rounded-full flex-shrink-0"></div>
                  <p className="text-gray-700">{text}</p>
                </div>
              ))}
            </div>
          </div>
        </SectionCard> */}

        <SectionCard
          id="data-security"
          title="Data Security"
          icon={IoLockClosed}
          color="green"
        >
          <div className="space-y-6">
            <div className="bg-green-50 border border-green-200 rounded-lg p-6">
              <div className="flex items-center space-x-3 mb-4">
                <IoLockClosed size={24} className="text-green-600" />
                <h3 className="text-lg font-semibold text-green-800">
                  Your Data is Protected
                </h3>
              </div>
              <p className="text-gray-700 leading-relaxed">
                We implement industry-standard security measures, such as
                SSL/TLS encryption and firewalls, to protect your data. Access
                to your personal information is restricted to authorized
                personnel only.
              </p>
            </div>

            <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
              <p className="text-sm text-yellow-800">
                <strong>Important:</strong> No internet transmission or
                electronic storage method is completely secure, so we cannot
                guarantee absolute protection.
              </p>
            </div>
          </div>
        </SectionCard>

        <SectionCard
          id="your-rights"
          title="Your Rights"
          icon={IoShield}
          color="purple"
        >
          <div className="space-y-4">
            <p className="text-gray-700 leading-relaxed mb-6">
              You have several rights regarding your personal data. Here's what
              you can do:
            </p>

            <div className="grid gap-4">
              {[
                "You have the right to access the personal data we hold about you.",
                "You may request correction or update of your data if it is inaccurate or incomplete.",
                "You can request deletion of your personal data, subject to legal obligations.",
                "You may restrict or object to certain data processing, or withdraw consent at any time.",
                "You have the right to data portability (obtaining a copy of your data in a common format).",
              ].map((text, i) => (
                <div
                  key={i}
                  className="flex items-start space-x-3 p-4 bg-purple-50 rounded-lg"
                >
                  <IoShield
                    size={20}
                    className="text-purple-600 mt-1 flex-shrink-0"
                  />
                  <p className="text-gray-700">{text}</p>
                </div>
              ))}
            </div>

            <div className="mt-6 p-4 bg-gray-50 rounded-lg">
              <p className="text-gray-700">
                <strong>To exercise any of these rights,</strong> please contact
                us using the information below. We will respond to your request
                in accordance with applicable law.
              </p>
            </div>
          </div>
        </SectionCard>

        <SectionCard
          id="third-party"
          title="Third-Party Links"
          icon={IoOpenOutline}
          color="indigo"
        >
          <div className="bg-indigo-50 border border-indigo-200 rounded-lg p-6">
            <p className="text-gray-700 leading-relaxed">
              Our website may contain links to third-party sites (for example,
              map or payment services). These sites have their own privacy
              policies, and we are not responsible for their practices. We
              encourage you to review their policies when you visit them.
            </p>
          </div>
        </SectionCard>

        <SectionCard
          id="children"
          title="Children's Privacy"
          icon={IoPerson}
          color="red"
        >
          <div className="bg-red-50 border border-red-200 rounded-lg p-6">
            <div className="flex items-center space-x-3 mb-4">
              <IoPerson size={24} className="text-red-600" />
              <h3 className="text-lg font-semibold text-red-800">
                Age Restriction: 18+
              </h3>
            </div>
            <p className="text-gray-700 leading-relaxed">
              Our services are not directed to children under 18. We do not
              knowingly collect personal data from minors under 18 years. If we
              learn that we have collected information from a child under 18, we
              will promptly delete it. Parents or guardians should contact us if
              they believe we have any information about a child.
            </p>
          </div>
        </SectionCard>

        <SectionCard
          id="changes to"
          title="Changes to this Policy"
          icon={IoRefresh}
          color="orange"
        >
          <div className="space-y-4">
            <p className="text-gray-700 leading-relaxed">
              We may update this Privacy Policy from time to time. When we do,
              we will revise the "Last Updated" date above. We encourage you to
              review this page periodically.
            </p>

            <div className="bg-orange-50 border border-orange-200 rounded-lg p-4">
              <p className="text-sm text-orange-800">
                <strong>Note:</strong> Continued use of our service after
                changes indicates your acceptance of the updated policy.
              </p>
            </div>
          </div>
        </SectionCard>

        <SectionCard id="contact" title="Contact Us" icon={IoMail} color="blue">
          <div className="space-y-6">
            <p className="text-gray-700 leading-relaxed">
              If you have any questions, concerns, or requests regarding your
              privacy, please contact us:
            </p>

            <div className="grid md:grid-cols-3 gap-6">
              <div className="bg-blue-50 rounded-lg p-6 text-center">
                <IoLocationSharp
                  size={32}
                  className="text-blue-600 mx-auto mb-3"
                />
                <h4 className="font-semibold text-gray-800 mb-2">Address</h4>
                <p className="text-sm text-gray-600">
                  Near Kamal Barat Ghar,
                  <br />
                  Joshi Sweets, Pithoragarh,
                  <br />
                  Uttarakhand, 262501
                </p>
              </div>

              <div className="bg-blue-50 rounded-lg p-6 text-center">
                <IoMail size={32} className="text-blue-600 mx-auto mb-3" />
                <h4 className="font-semibold text-gray-800 mb-2">Email</h4>
                <p className="text-sm text-gray-600">privacy@bikerentals.com</p>
              </div>

              <div className="bg-blue-50 rounded-lg p-6 text-center">
                <IoCall size={32} className="text-blue-600 mx-auto mb-3" />
                <h4 className="font-semibold text-gray-800 mb-2">Phone</h4>
                <p className="text-sm text-gray-600">+91 75360 18155</p>
              </div>
            </div>
          </div>
        </SectionCard>
      </div>

      {/* Footer */}
      <div className="bg-gray-800 text-white py-8">
        <div className="max-w-4xl mx-auto px-6 text-center">
          <p className="text-sm text-gray-300">
            © 2024 Bike Rentals. This privacy policy is designed to be
            transparent and easy to understand.
          </p>
        </div>
      </div>
    </div>
  );
};

export default PrivacyPolicy;

// import {
//   FiChevronRight,
//   FiMail,
//   FiPhone,
//   FiMapPin,
//   FiUser,
//   FiSettings,
//   FiShare2,
//   FiShield,
//   FiCpu,
//   FiEye,
//   FiLink,
//   FiUsers,
//   FiRefreshCw,
//   FiPhoneCall,
//   FiCheckCircle,
// } from "react-icons/fi";

// const sections = [
//   { id: "info-collect", title: "Information We Collect", icon: <FiUser /> },
//   {
//     id: "use-info",
//     title: "How We Use Your Information",
//     icon: <FiSettings />,
//   },
//   { id: "sharing-info", title: "Sharing of Information", icon: <FiShare2 /> },
//   { id: "data-security", title: "Data Security", icon: <FiShield /> },
//   { id: "cookies-tracking", title: "Cookies and Tracking", icon: <FiCpu /> },
//   { id: "your-rights", title: "Your Rights", icon: <FiEye /> },
//   { id: "third-party", title: "Third-Party Links", icon: <FiLink /> },
//   { id: "children-privacy", title: "Children’s Privacy", icon: <FiUsers /> },
//   {
//     id: "changes-policy",
//     title: "Changes to this Policy",
//     icon: <FiRefreshCw />,
//   },
//   { id: "contact-us", title: "Contact Us", icon: <FiPhoneCall /> },
// ];

// const PrivacyPolicy = () => {
//   const boxClass = `bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg shadow-md p-6 mb-8 transition-colors duration-500`;
//   const headingClass =
//     "text-3xl font-extrabold text-orange-500 border-l-4 border-orange-500 pl-4 mb-6 drop-shadow-md";
//   const customListClass = "list-none pl-0";

//   return (
//     <main className="dark:bg-gray-900 dark:text-gray-100 bg-white text-gray-800 min-h-screen py-12 transition-colors duration-500">
//       <div className="max-w-5xl mx-auto px-6 sm:px-8 lg:px-12">
//         {/* Header */}
//         <header className="mb-12 flex flex-col sm:flex-row sm:justify-between sm:items-center">
//           <h1 className="text-4xl font-extrabold text-orange-500 mb-4 sm:mb-0 tracking-tight drop-shadow-md">
//             Privacy Policy
//           </h1>
//           {/* <button
//             onClick={() => setDarkMode(!darkMode)}
//             className="inline-flex items-center px-4 py-2 border border-orange-600 rounded-md text-orange-600 hover:bg-orange-600 hover:text-white transition"
//             aria-label="Toggle dark mode"
//           >
//             {darkMode ? 'Light Mode' : 'Dark Mode'}
//           </button> */}
//         </header>
//         {/* Effective Dates */}
//         <p className="text-sm text-gray-500 dark:text-gray-400 mb-10">
//           <strong>Effective Date:</strong> January 1, 2025
//           <br />
//           <strong>Last Updated:</strong> April 1, 2025
//         </p>

//         {/* Welcome paragraph immediately after heading */}
//         <div className={boxClass}>
//           <p>
//             Welcome to <em>Your Bike Rental Service</em>. This Privacy Policy
//             explains how we collect, use, and protect your information when you
//             rent bikes or scooters through our website.
//           </p>
//         </div>

//         <div className="flex flex-col lg:flex-row gap-10">
//           {/* Table of Contents */}
//           <nav className="hidden lg:block w-64 sticky top-24 self-start bg-orange-50 dark:bg-gray-800 rounded-lg p-6 shadow-lg">
//             <h2 className="text-xl font-semibold text-orange-500 mb-6">
//               Contents
//             </h2>
//             <ul className="space-y-3">
//               {sections.map(({ id, title, icon }) => (
//                 <li key={id}>
//                   <a
//                     href={`#${id}`}
//                     className="flex items-center text-orange-500 hover:text-orange-500 dark:hover:text-orange-400 transition"
//                   >
//                     <span className="mr-2 text-lg">{icon}</span>
//                     {title}
//                     <FiChevronRight className="ml-auto" />
//                   </a>
//                 </li>
//               ))}
//             </ul>
//           </nav>

//           {/* Content */}
//           <article className="prose prose-orange dark:prose-invert max-w-none flex-1">
//             <section id="info-collect" className={boxClass}>
//               <h2 className={headingClass}>Information We Collect</h2>
//               <ul className={customListClass}>
//                 {[
//                   "Name, email address, phone number, and other contact details you provide.",
//                   "Credit/debit card information, billing address, and transaction details when you make a payment.",
//                   "Ride history, rental dates/times, pickup/drop-off locations, and vehicle preference.",
//                   "IP address, browser type, device information, and cookies usage data.",
//                 ].map((text, i) => (
//                   <li key={i} className="flex items-start mb-2">
//                     <FiCheckCircle className="flex-shrink-0 mt-1 text-orange-500 mr-3" />
//                     <span>{text}</span>
//                   </li>
//                 ))}
//               </ul>
//             </section>

//             <section id="use-info" className={boxClass}>
//               <h2 className={headingClass}>How We Use Your Information</h2>
//               <ul className={customListClass}>
//                 {[
//                   "To provide, operate, and improve our bike/scooter rental services.",
//                   "To process and secure your payments and rentals.",
//                   "To communicate booking confirmations, updates, and customer support information.",
//                   "To send promotional offers or newsletters if you opt in.",
//                   "To comply with legal and regulatory requirements.",
//                 ].map((text, i) => (
//                   <li key={i} className="flex items-start mb-2">
//                     <FiCheckCircle className="flex-shrink-0 mt-1 text-orange-500 mr-3" />
//                     <span>{text}</span>
//                   </li>
//                 ))}
//               </ul>
//             </section>

//             <section id="sharing-info" className={boxClass}>
//               <h2 className={headingClass}>Sharing of Information</h2>
//               <p>
//                 We do not sell your personal information to third parties. We
//                 may share data with trusted service providers who assist in
//                 operating our service (such as payment processors and vehicle
//                 maintenance partners) under strict confidentiality. We may also
//                 disclose information when required by law (e.g., to comply with
//                 a subpoena or legal process).
//               </p>
//             </section>

//             <section id="data-security" className={boxClass}>
//               <h2 className={headingClass}>Data Security</h2>
//               <p>
//                 We implement industry-standard security measures, such as
//                 SSL/TLS encryption and firewalls, to protect your data. Access
//                 to your personal information is restricted to authorized
//                 personnel only. However, no internet transmission or electronic
//                 storage method is completely secure, so we cannot guarantee
//                 absolute protection.
//               </p>
//             </section>

//             <section id="cookies-tracking" className={boxClass}>
//               <h2 className={headingClass}>Cookies and Tracking</h2>
//               <p>
//                 We use cookies and similar tracking technologies to enhance your
//                 experience, remember preferences, and analyze usage. These may
//                 include:
//               </p>
//               <ul className={customListClass}>
//                 {[
//                   "Necessary for basic site functionality and to complete transactions.",
//                   "Used to understand how you use our site so we can improve it.",
//                   "To deliver relevant promotions and measure ad campaign effectiveness.",
//                 ].map((text, i) => (
//                   <li key={i} className="flex items-start mb-2">
//                     <FiCheckCircle className="flex-shrink-0 mt-1 text-orange-500 mr-3" />
//                     <span>{text}</span>
//                   </li>
//                 ))}
//               </ul>
//               <p>
//                 You can control or delete cookies through your browser settings.
//                 Please note that disabling cookies may affect some features of
//                 our service.
//               </p>
//             </section>

//             <section id="your-rights" className={boxClass}>
//               <h2 className={headingClass}>Your Rights</h2>
//               <ul className={customListClass}>
//                 {[
//                   "You have the right to access the personal data we hold about you.",
//                   "You may request correction or update of your data if it is inaccurate or incomplete.",
//                   "You can request deletion of your personal data, subject to legal obligations.",
//                   "You may restrict or object to certain data processing, or withdraw consent at any time.",
//                   "You have the right to data portability (obtaining a copy of your data in a common format).",
//                 ].map((text, i) => (
//                   <li key={i} className="flex items-start mb-2">
//                     <FiCheckCircle className="flex-shrink-0 mt-1 text-orange-500 mr-3" />
//                     <span>{text}</span>
//                   </li>
//                 ))}
//               </ul>
//               <p>
//                 To exercise any of these rights, please contact us (see below).
//                 We will respond to your request in accordance with applicable
//                 law.
//               </p>
//             </section>

//             <section id="third-party" className={boxClass}>
//               <h2 className={headingClass}>Third-Party Links</h2>
//               <p>
//                 Our website may contain links to third-party sites (for example,
//                 map or payment services). These sites have their own privacy
//                 policies, and we are not responsible for their practices. We
//                 encourage you to review their policies when you visit them.
//               </p>
//             </section>

//             <section id="children-privacy" className={boxClass}>
//               <h2 className={headingClass}>Children’s Privacy</h2>
//               <p>
//                 Our services are not directed to children under 18. We do not
//                 knowingly collect personal data from minors under 18 years. If
//                 we learn that we have collected information from a child under
//                 18, we will promptly delete it. Parents or guardians should
//                 contact us if they believe we have any information about a
//                 child.
//               </p>
//             </section>

//             <section id="changes-policy" className={boxClass}>
//               <h2 className={headingClass}>Changes to this Policy</h2>
//               <p>
//                 We may update this Privacy Policy from time to time. When we do,
//                 we will revise the “Last Updated” date above. We encourage you
//                 to review this page periodically. Continued use of our service
//                 after changes indicates your acceptance of the updated policy.
//               </p>
//             </section>

//             <section id="contact-us" className={boxClass}>
//               <h2 className={headingClass}>Contact Us</h2>
//               <p>
//                 If you have any questions, concerns, or requests regarding your
//                 privacy, please contact us at:
//               </p>
//               <ul className="space-y-3">
//                 <li className="flex items-center gap-2">
//                   <FiMapPin className="text-orange-500" />
//                   <span>
//                     Near Kamal Barat Ghar ,Joshi Sweets, Pithoragarh,
//                     Uttarakhand, 262501
//                   </span>
//                 </li>
//                 <li className="flex items-center gap-2">
//                   <FiMail className="text-orange-500" />
//                   <a
//                     href="mailto:privacy@bikerentals.com"
//                     className="text-orange-500 hover:underline"
//                   >
//                     privacy@bikerentals.com
//                   </a>
//                 </li>
//                 <li className="flex items-center gap-2">
//                   <FiPhone className="text-orange-500" />
//                   <a
//                     href="tel:+1234567890"
//                     className="text-orange-500 hover:underline"
//                   >
//                     +917536018155
//                   </a>
//                 </li>
//               </ul>
//             </section>
//           </article>
//         </div>
//       </div>
//     </main>
//   );
// };

// export default PrivacyPolicy;
 const res = await axios.post(
        "http://localhost:5000/api/auth/user/verify",
        { otp: otp },
        { withCredentials: true }
      );
      import { useState } from "react";
import EmptyBookingsPage from "./EmptyBookingsPage";
import { useSelector } from "react-redux";

export default function MyOrders() {
  const bookings = useSelector((store) => store.user.userInfo.myOrders);
  console.log(bookings);
  // const [bookings, setBookings] = useState([
  //   {
  //     id: 1,
  //     date: "2025-09-05",
  //     time: "8:15 PM",
  //     pickupDate: "2025-09-05",
  //     dropoffDate: "2025-09-07",
  //     pickupTime: "9:00 AM",
  //     status: "Upcoming",
  //     bikeImage:
  //       "https://res.cloudinary.com/dumreogj3/image/upload/v1757407217/classic_pgnsmc.png",
  //     bikeName: "Royal Enfield Classic 350",
  //   },
  //   {
  //     id: 2,
  //     date: "2025-09-06",
  //     time: "7:00 PM",
  //     pickupDate: "2025-09-06",
  //     dropoffDate: "2025-09-09",
  //     pickupTime: "10:30 AM",
  //     status: "Upcoming",
  //     bikeImage:
  //       "https://res.cloudinary.com/dumreogj3/image/upload/v1757407531/AHunter_ro7dzw.png",
  //     bikeName: "Royal Enfield Hunter 350",
  //   },
  //   {
  //     id: 3,
  //     date: "2025-09-02",
  //     time: "10:30 AM",
  //     pickupDate: "2025-09-02",
  //     dropoffDate: "2025-09-03",
  //     pickupTime: "8:00 AM",
  //     status: "Completed",
  //     bikeImage:
  //       "https://res.cloudinary.com/dumreogj3/image/upload/v1757407928/YNtorq_mazosu.png",
  //     bikeName: "Ntorq 125 ",
  //   },
  // ]);

  // const handleCancel = (id: number) =>
  //   setBookings((prev) =>
  //     prev.map((b) => (b.id === id ? { ...b, status: "Cancelled" } : b))
  //   );

  const sortedBookings = [...bookings].sort((a, b) => {
    if (a.status === "Upcoming" && b.status !== "Upcoming") return -1;
    if (a.status !== "Upcoming" && b.status === "Upcoming") return 1;
    return new Date(a.date).getTime() - new Date(b.date).getTime();
  });

  return (
    <div
      className={`md:min-h-screen bg-gray-50 dark:bg-gray-900 py-14 px-4 ${
        sortedBookings.length === 0 && "bg-white"
      }`}
    >
      {/* px-4 → 16px padding har side (mobile par bhi) */}
      {sortedBookings.length !== 0 && (
        <h1 className="text-4xl font-bold text-center mb-12 text-gray-900 dark:text-gray-300 tracking-tight">
          My{" "}
          <span className="text-indigo-600 dark:text-yellow-600">Bookings</span>
        </h1>
      )}

      {sortedBookings.length === 0 ? (
        <p className="text-center text-gray-500 text-lg">
          <EmptyBookingsPage />
        </p>
      ) : (
        <div className="max-w-3xl mx-auto space-y-8">
          {sortedBookings.map((booking) => (
            <div
              key={booking.id}
              className="rounded-xl bg-white dark:bg-gray-800 shadow-md hover:shadow-lg transition duration-300 overflow-hidden flex flex-col md:flex-row"
            >
              {/* Image */}
              <div className="flex items-center justify-center bg-gray-100 dark:bg-gray-800 md:w-44 p-5">
                <img
                  src={booking.bikeImage}
                  alt={booking.bikeName}
                  className="w-40 h-28 object-contain "
                />
              </div>

              {/* Details */}
              <div className="flex-1 p-5">
                <div className="flex justify-between items-start">
                  <div>
                    <h2 className="text-lg font-semibold text-gray-900 dark:text-yellow-600">
                      {booking.bikeName}
                    </h2>
                    <p className="text-sm text-gray-500 mt-1 dark:text-gray-300">
                      Booked: {booking.date} at {booking.time}
                    </p>
                  </div>

                  <span
                    className={`px-3 py-1 rounded-full text-xs font-medium ${
                      booking.status === "Upcoming"
                        ? "bg-indigo-50 text-indigo-600 dark:bg-yellow-100 "
                        : booking.status === "Completed"
                        ? "bg-green-50 text-green-600 dark:bg-yellow-600 dark:text-gray-200"
                        : "bg-red-50 text-red-600"
                    }`}
                  >
                    {booking.status}
                  </span>
                </div>

                {/* Extra Info */}
                <div className="mt-5 grid grid-cols-1 sm:grid-cols-2 gap-y-2 text-sm text-gray-700">
                  <div className="text-gray-900 dark:text-gray-400">
                    <span className="font-medium">🚚 Pickup:</span>{" "}
                    {booking.pickupDate} — {booking.pickupTime}
                  </div>
                  <div className="text-gray-900 dark:text-gray-400">
                    <span className="font-medium">🏁 Drop-off:</span>{" "}
                    {booking.dropoffDate}
                  </div>
                </div>

                {booking.status === "Upcoming" && (
                  <button
                    onClick={() => handleCancel(booking.id)}
                    className="mt-6 inline-flex items-center justify-center bg-red-500 hover:bg-red-600 text-white text-sm font-medium px-5 py-2 rounded-lg transition"
                  >
                    Cancel Booking
                  </button>
                )}
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );
}


import { useMemo } from "react";
import { useSelector, useDispatch } from "react-redux";
import EmptyBookingsPage from "./EmptyBookingsPage";
// import { AppState } from "../store";

interface Vehicle {
  _id: string;
  name: string;
  image: string;
}

interface Booking {
  _id: string;
  razorpayOrderId: string;
  orderStatus: string;
  pickUpDate: string;
  pickUpTime: string;
  dropOffDate: string;
  dropOffTime: string;
  vehicle: Vehicle;
}

export default function MyOrders() {
  const dispatch = useDispatch();
  const bookings = useSelector(
    (store) => store.user.userInfo.myOrders
  ) as Booking[];

  const sortedBookings = useMemo(() => {
    return [...bookings].sort((a, b) => {
      const statusOrder = (s: string) =>
        s === "confirmed" ? 0 : s === "pending" ? 1 : 2;
      const diff = statusOrder(a.orderStatus) - statusOrder(b.orderStatus);
      return diff !== 0
        ? diff
        : new Date(a.pickUpDate).getTime() - new Date(b.pickUpDate).getTime();
    });
  }, [bookings]);

  const handleCancel = (orderId: string) => {
    console.log("cancelled", orderId);
    // dispatch(cancelBooking(orderId));
  };

  if (sortedBookings.length === 0) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-white">
        <EmptyBookingsPage />
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900 py-14 px-4">
      <h1 className="text-4xl font-bold text-center mb-12 text-gray-900 dark:text-gray-300">
        My{" "}
        <span className="text-indigo-600 dark:text-yellow-600">Bookings</span>
      </h1>
      <div className="max-w-3xl mx-auto space-y-8">
        {sortedBookings.map((booking) => {
          const pickUpDate = new Date(booking.pickUpDate).toLocaleDateString();
          const dropOffDate = new Date(
            booking.dropOffDate
          ).toLocaleDateString();
          return (
            <div
              key={booking._id}
              className="flex flex-col md:flex-row rounded-xl bg-white dark:bg-gray-800 shadow-md hover:shadow-lg transition overflow-hidden"
            >
              <div className="flex items-center justify-center bg-gray-100 dark:bg-gray-800 md:w-44 p-5">
                <img
                  src={booking.vehicle.image}
                  alt={booking.vehicle.name}
                  className="w-40 h-28 object-contain"
                />
              </div>
              <div className="flex-1 p-5">
                <div className="flex justify-between items-start">
                  <div>
                    <h2 className="text-lg font-semibold text-gray-900 dark:text-yellow-600">
                      {booking.vehicle.name}
                    </h2>
                    <p className="text-sm text-gray-500 mt-1 dark:text-gray-300">
                      Booked: {pickUpDate} at {booking.pickUpTime}
                    </p>
                  </div>
                  <span
                    className={`px-3 py-1 rounded-full text-xs font-medium ${
                      booking.orderStatus === "confirmed"
                        ? "bg-green-50 text-green-600 dark:bg-green-800 dark:text-green-200"
                        : booking.orderStatus === "pending"
                        ? "bg-indigo-50 text-indigo-600 dark:bg-yellow-100"
                        : "bg-red-50 text-red-600"
                    }`}
                  >
                    {booking.orderStatus.charAt(0).toUpperCase() +
                      booking.orderStatus.slice(1)}
                  </span>
                </div>
                <div className="mt-5 grid grid-cols-1 sm:grid-cols-2 gap-y-2 text-sm text-gray-700">
                  <div className="text-gray-900 dark:text-gray-400">
                    <span className="font-medium">🚚 Pickup:</span> {pickUpDate}{" "}
                    — {booking.pickUpTime}
                  </div>
                  <div className="text-gray-900 dark:text-gray-400">
                    <span className="font-medium">🏁 Drop-off:</span>{" "}
                    {dropOffDate} — {booking.dropOffTime}
                  </div>
                </div>
                {booking.orderStatus === "confirmed" && (
                  <button
                    onClick={() => handleCancel(booking.razorpayOrderId)}
                    className="mt-6 inline-flex items-center justify-center bg-red-500 hover:bg-red-600 text-white text-sm font-medium px-5 py-2 rounded-lg transition"
                  >
                    Cancel Booking
                  </button>
                )}
              </div>
            </div>
          );
        })}
      </div>
    </div>
  );
}
