import { useEffect, useRef, useState } from "react";
import { useDispatch } from "react-redux";
import { VehicleList_Action } from "../store/VehicleSlice";
import { useNavigate } from "react-router-dom";
import PickDropTime from "./PickDropTime";
import { toast } from "react-toastify";
export default function Available_Rides() {
  const navigate = useNavigate();
  const dispatch = useDispatch();
  const [minDate, setMinDate] = useState("");
  const [maxDate, setMaxDate] = useState("");
  const [pickUpTime, setpickUptime] = useState<string>("05:00 AM");
  const [dropOffTime, setDropOfftime] = useState<string>("05:00 AM");
  const [pickUpState, setPickUpState] = useState<boolean>(false);
  const [dropOffState, setDropOffState] = useState<boolean>(false);
  const pickupRef = useRef(null);
  const dropoffRef = useRef(null);
  const pickUpDate = useRef("");
  const dropOffDate = useRef("");
  const [currentBikeIndex, setCurrentBikeIndex] = useState(0);
  const [formData, setFormData] = useState({
    location: "Pithoragarh",
    pickupDate: "",
    dropoffDate: "",
    pickupTime: "05:00 AM",
    dropoffTime: "05:00 AM",
  });
  const [isAnimating, setIsAnimating] = useState(false);
  const [isVisible, setIsVisible] = useState(false);

  // Sample bike images for full background rotation
  const backgroundImages = [
    "https://images.unsplash.com/photo-1558618666-fcd25c85cd64?w=1920&h=1080&fit=crop",
    "https://images.unsplash.com/photo-1558618047-3c8c76ca7d13?w=1920&h=1080&fit=crop",
    "https://images.unsplash.com/photo-1542662565-7e4b87c7431d?w=1920&h=1080&fit=crop",
    "https://images.unsplash.com/photo-1571068316344-75bc76f77890?w=1920&h=1080&fit=crop",
  ];

  // Auto-rotate background with smooth animation
  useEffect(() => {
    setIsVisible(true);
    const interval = setInterval(() => {
      setIsAnimating(true);
      setTimeout(() => {
        setCurrentBikeIndex((prev) => (prev + 1) % backgroundImages.length);
        setIsAnimating(false);
      }, 800);
    }, 5000);
    return () => clearInterval(interval);
  }, []);

  const timeSlots = [
    "05:00 AM",
    "05:30 AM",
    "06:00 AM",
    "06:30 AM",
    "07:00 AM",
    "07:30 AM",
    "08:00 AM",
    "08:30 AM",
    "09:00 AM",
    "09:30 AM",
    "10:00 AM",
    "10:30 AM",
    "11:00 AM",
    "11:30 AM",
    "12:00 PM",
    "12:30 PM",
    "01:00 PM",
    "01:30 PM",
    "02:00 PM",
    "02:30 PM",
  ];

  // Calculate allowed booking dates
  const [minDropDate, setMindropdate] = useState("");
  useEffect(() => {
    const today = new Date();

    // Minimum: today
    const min = new Date(today);

    // Maximum: 7 days from today
    const max = new Date(today);
    max.setDate(today.getDate() + 45);

    // Format YYYY-MM-DD for input
    const formatDate = (d: Date) => d.toISOString().split("T")[0];

    setMinDate(formatDate(min));
    setMindropdate(formatDate(min));
    setMaxDate(formatDate(max));
    // setMindropdate(minDate);
    // console.log("mindate", minDate);
    // console.log("mindate", minDate);
    // console.log("dropdaate", minDropDate);
  }, []);
  const fadeInUpClasses = `opacity-0  animate-fadeInUp animation-fill-forwards`;
  const searchBikeHandler = () => {
    console.log("hiii", pickUpDate.current.value);
    const date = new Date(`1970-01-01 ${pickUpTime}`);
    const hrsPickUp24 = date.toLocaleTimeString("en-GB", {
      hour: "2-digit",
      minute: "2-digit",
    });
    const date2 = new Date(`1970-01-01 ${dropOffTime}`);
    const hrsDropOff24 = date2.toLocaleTimeString("en-GB", {
      hour: "2-digit",
      minute: "2-digit",
    });
    const pickup = new Date(`${pickUpDate.current.value}T${hrsPickUp24}`);
    const dropoff = new Date(`${dropOffDate.current.value}T${hrsDropOff24}`);
    // Get difference in milliseconds
    console.log("pickup", pickup);
    console.log("dropof", dropoff);
    const durationMs = dropoff.getTime() - pickup.getTime();
    // Convert to hours
    const durationHours = durationMs / (1000 * 60 * 60);
    if (durationHours < 4) {
      console.log("yes");
      toast.warn("Minimum 4 hours required");
      return;
    } else {
      console.log("no");
    }
    // Check if duration is greater than 4 hours
    // return durationHours > 4;
    console.log(durationHours);
    // console.log("date1", date, "date2", date2);
    // console.log("new", hrsPickUp24);
    // console.log("new", hrsDropOff24);
    const times = {
      pickUpDate: pickUpDate.current.value,
      dropOffDate: dropOffDate.current.value,
      pickUpTime: hrsPickUp24,
      dropOffTime: hrsDropOff24,
    };
    console.log("newHere", times);
    dispatch(VehicleList_Action.addingAvailableBikes(times));
    navigate("/available-vahicles", { state: times });
  };
  // Generate time slots (5AM - 10PM)
  // setMindropdate(minDate);
  // console.log("minDate", minDate);
  return (
    <>
      <div className={`relative bg-gray-50 ${fadeInUpClasses}`}>
        {/* Background */}
        <div className="absolute animate-bgSlide bg-cover bg-center  inset-0">
          {/* <img
          src={images[currentIndex]}
          alt="Road background"
          className="w-full h-full object-cover  transition-opacity  duration-1000 ease-in-out"
        /> */}
          <div className="absolute inset-0 bg-gradient-to-r from-white/90 via-white/70 to-transparent" />
        </div>
        {/* Content */}
        <div className="hidden md:block">
          {/* <div className="inline-flex items-center gap-3 bg-yellow-500/20 backdrop-blur-sm border border-yellow-400/30 rounded-full px-6 py-3">
            <div className="w-3 h-3 bg-yellow-400 rounded-full animate-pulse"></div>
            <span className="text-yellow-400 font-semibold text-sm uppercase tracking-wider">
              Premium Rentals
            </span>
          </div> */}

          {/* Main Heading */}
          {/* <div className="relative max-w-7xl mx-auto px-6 py-16 grid md:grid-cols-2 items-center gap-8 ">
            <div className="flex items-center gap-3 bg-white/10 backdrop-blur-sm rounded-xl px-4 py-3 border border-white/20">
              <div className="w-12 h-12 bg-blue-500 rounded-full flex items-center justify-center shadow-lg">
                <svg
                  className="w-6 h-6 text-white"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"
                  />
                </svg>
              </div>
              <div>
                <div className="text-white font-semibold">Secure Payment</div>
                <div className="text-gray-300 text-sm">256-bit SSL</div>
              </div>
            </div>

            <div className="flex items-center gap-3 bg-white/10 backdrop-blur-sm rounded-xl px-4 py-3 border border-white/20">
              <div className="w-12 h-12 bg-purple-500 rounded-full flex items-center justify-center shadow-lg">
                <svg
                  className="w-6 h-6 text-white"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M13 10V3L4 14h7v7l9-11h-7z"
                  />
                </svg>
              </div>
              <div>
                <div className="text-white font-semibold">Instant Booking</div>
                <div className="text-gray-300 text-sm">Under 60 sec</div>
              </div>
            </div>
          </div> */}

          {/* Stats Row */}
          {/* <div className="flex gap-8 pt-6 border-t border-white/20">
            <div className="text-center">
              <div className="text-4xl font-black text-yellow-400 mb-2">
                10K+
              </div>
              <div className="text-gray-300 text-sm uppercase tracking-wider">
                Happy Riders
              </div>
            </div>
            <div className="text-center">
              <div className="text-4xl font-black text-yellow-400 mb-2">
                4.9â˜…
              </div>
              <div className="text-gray-300 text-sm uppercase tracking-wider">
                Rating
              </div>
            </div>
            <div className="text-center">
              <div className="text-4xl font-black text-yellow-400 mb-2">
                24/7
              </div>
              <div className="text-gray-300 text-sm uppercase tracking-wider">
                Support
              </div>
            </div>
          </div> */}
        </div>

        <div
          className={`w-full max-w-lg mx-auto lg:mx-0 lg:ml-auto transition-all duration-1000 delay-300  order-1 ${
            isVisible ? "opacity-100 translate-y-0" : "opacity-0 translate-y-10"
          }`}
        >
          {/* <div className="block md:hidden">
            <div className="inline-flex items-center gap-3 bg-yellow-500/20 backdrop-blur-sm border border-yellow-400/30 rounded-full px-6 py-3">
              <div className="w-3 h-3 bg-yellow-400 rounded-full animate-pulse"></div>
              <span className="text-yellow-400 font-semibold text-sm uppercase tracking-wider">
                Premium Rentals
              </span>
            </div> */}

          {/* Main Heading */}
          {/* <div className="space-y-6  ">
              <h1 className="text-5xl lg:text-8xl font-black text-white leading-tight tracking-tight">
                Ride Easy.
                <br />
                <span className="bg-gradient-to-r from-yellow-400 via-orange-400 to-red-400 bg-clip-text text-transparent animate-gradient-x">
                  Ride Now
                </span>
              </h1>
              <p className="text-xl lg:text-2xl text-gray-200 font-light leading-relaxed max-w-2xl">
                Premium vehicles, seamless booking, and trusted serviceâ€”ready
                when you are. Experience the freedom of the road.
              </p>
            </div>
          </div> */}
          <div className="bg-white/95 dark:bg-gray-900/95 backdrop-blur-2xl rounded-3xl shadow-2xl border border-white/30 dark:border-gray-700/30 p-8 transform hover:scale-[1.02] transition-all duration-500">
            {/* Form Header */}
            <div className="text-center mb-8">
              <h2 className="text-3xl font-bold text-gray-900 dark:text-white mb-2">
                Book Your Ride
              </h2>
              <p className="text-gray-600 dark:text-gray-400">
                Choose your perfect vehicle
              </p>
            </div>

            <div className="space-y-6">
              {/* Location Input - Enhanced */}
              <div className="space-y-3">
                <label className="flex items-center gap-2 text-sm font-bold text-gray-700 dark:text-gray-300 uppercase tracking-wider">
                  <svg
                    className="w-4 h-4 text-yellow-500"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth={2}
                      d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"
                    />
                  </svg>
                  Pickup Location
                </label>
                <div className="relative group">
                  <input
                    type="text"
                    placeholder="Enter pickup location"
                    value={formData.location}
                    readOnly
                    onChange={(e) =>
                      setFormData({ ...formData, location: e.target.value })
                    }
                    className="w-full px-6 py-4 bg-gray-50 dark:bg-gray-800 border-2 border-gray-200 dark:border-gray-600 rounded-2xl focus:ring-4 focus:ring-yellow-500/20 focus:border-yellow-500 transition-all duration-300 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 group-hover:border-yellow-400"
                  />
                  <div className="absolute right-4 top-1/2 transform -translate-y-1/2 text-gray-400 group-focus-within:text-yellow-500 transition-colors">
                    <svg
                      className="w-5 h-5"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth={2}
                        d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
                      />
                    </svg>
                  </div>
                </div>
              </div>

              {/* Date Row - Enhanced */}
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-3">
                  <label className="flex items-center gap-2 text-sm font-bold text-gray-700 dark:text-gray-300 uppercase tracking-wider">
                    <svg
                      className="w-4 h-4 text-yellow-500"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth={2}
                        d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"
                      />
                    </svg>
                    Pickup Date
                  </label>
                  <input
                    type="date"
                    value={formData.pickupDate}
                    onKeyDown={(e) => e.preventDefault()}
                    onChange={(e) =>
                      setFormData({
                        ...formData,
                        pickupDate: e.target.value,
                      })
                    }
                    className="w-full px-4 py-4 bg-gray-50 dark:bg-gray-800 border-2 border-gray-200 dark:border-gray-600 rounded-2xl focus:ring-4 focus:ring-yellow-500/20 focus:border-yellow-500 transition-all duration-300 text-gray-900 dark:text-white hover:border-yellow-400"
                  />
                </div>
                <div className="space-y-3">
                  <label className="flex items-center gap-2 text-sm font-bold text-gray-700 dark:text-gray-300 uppercase tracking-wider">
                    <svg
                      className="w-4 h-4 text-yellow-500"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth={2}
                        d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"
                      />
                    </svg>
                    Return Date
                  </label>
                  <input
                    type="date"
                    value={formData.dropoffDate}
                    onKeyDown={(e) => e.preventDefault()}
                    onChange={(e) =>
                      setFormData({
                        ...formData,
                        dropoffDate: e.target.value,
                      })
                    }
                    className="w-full px-4 py-4 bg-gray-50 dark:bg-gray-800 border-2 border-gray-200 dark:border-gray-600 rounded-2xl focus:ring-4 focus:ring-yellow-500/20 focus:border-yellow-500 transition-all duration-300 text-gray-900 dark:text-white hover:border-yellow-400"
                  />
                </div>
              </div>

              {/* Time Row - Enhanced */}
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-3">
                  <label className="flex items-center gap-2 text-sm font-bold text-gray-700 dark:text-gray-300 uppercase tracking-wider">
                    <svg
                      className="w-4 h-4 text-yellow-500"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth={2}
                        d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"
                      />
                    </svg>
                    Pickup Time
                  </label>
                  <select
                    value={formData.pickupTime}
                    onChange={(e) =>
                      setFormData({
                        ...formData,
                        pickupTime: e.target.value,
                      })
                    }
                    className="w-full px-4 py-4 bg-gray-50 dark:bg-gray-800 border-2 border-gray-200 dark:border-gray-600 rounded-2xl focus:ring-4 focus:ring-yellow-500/20 focus:border-yellow-500 transition-all duration-300 text-gray-900 dark:text-white appearance-none cursor-pointer hover:border-yellow-400"
                  >
                    {timeSlots.map((time) => (
                      <option key={time} value={time}>
                        {time}
                      </option>
                    ))}
                  </select>
                </div>
                <div className="space-y-3">
                  <label className="flex items-center gap-2 text-sm font-bold text-gray-700 dark:text-gray-300 uppercase tracking-wider">
                    <svg
                      className="w-4 h-4 text-yellow-500"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth={2}
                        d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"
                      />
                    </svg>
                    Return Time
                  </label>
                  <select
                    value={formData.dropoffTime}
                    onChange={(e) =>
                      setFormData({
                        ...formData,
                        dropoffTime: e.target.value,
                      })
                    }
                    className="w-full px-4 py-4 bg-gray-50 dark:bg-gray-800 border-2 border-gray-200 dark:border-gray-600 rounded-2xl focus:ring-4 focus:ring-yellow-500/20 focus:border-yellow-500 transition-all duration-300 text-gray-900 dark:text-white appearance-none cursor-pointer hover:border-yellow-400"
                  >
                    {timeSlots.map((time) => (
                      <option key={time} value={time}>
                        {time}
                      </option>
                    ))}
                  </select>
                </div>
              </div>

              {/* Enhanced Search Button */}
              <button className="w-full py-5 bg-gradient-to-r from-yellow-500 via-orange-500 to-red-500 hover:from-yellow-600 hover:via-orange-600 hover:to-red-600 text-white font-bold rounded-2xl shadow-xl hover:shadow-2xl transform hover:scale-105 transition-all duration-300 flex items-center justify-center gap-4 text-lg group">
                <svg
                  className="w-6 h-6 group-hover:animate-bounce"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
                  />
                </svg>
                Search Available Bikes
                <svg
                  className="w-5 h-5 group-hover:translate-x-1 transition-transform"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M13 7l5 5m0 0l-5 5m5-5H6"
                  />
                </svg>
              </button>

              {/* Enhanced Quick Features */}
              <div className="pt-6 border-t border-gray-200 dark:border-gray-700">
                <div className="grid grid-cols-3 gap-4 text-center">
                  <div className="flex flex-col items-center gap-2">
                    <div className="w-10 h-10 bg-green-100 dark:bg-green-900/30 rounded-full flex items-center justify-center">
                      <svg
                        className="w-5 h-5 text-green-600 dark:text-green-400"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                      >
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          strokeWidth={2}
                          d="M5 13l4 4L19 7"
                        />
                      </svg>
                    </div>
                    <span className="text-xs font-medium text-gray-600 dark:text-gray-400">
                      Free Cancel
                    </span>
                  </div>
                  <div className="flex flex-col items-center gap-2">
                    <div className="w-10 h-10 bg-blue-100 dark:bg-blue-900/30 rounded-full flex items-center justify-center">
                      <svg
                        className="w-5 h-5 text-blue-600 dark:text-blue-400"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                      >
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          strokeWidth={2}
                          d="M13 10V3L4 14h7v7l9-11h-7z"
                        />
                      </svg>
                    </div>
                    <span className="text-xs font-medium text-gray-600 dark:text-gray-400">
                      Instant Book
                    </span>
                  </div>
                  <div className="flex flex-col items-center gap-2">
                    <div className="w-10 h-10 bg-purple-100 dark:bg-purple-900/30 rounded-full flex items-center justify-center">
                      <svg
                        className="w-5 h-5 text-purple-600 dark:text-purple-400"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                      >
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          strokeWidth={2}
                          d="M18.364 5.636l-3.536 3.536m0 5.656l3.536 3.536M9.172 9.172L5.636 5.636m3.536 9.192L5.636 18.364"
                        />
                      </svg>
                    </div>
                    <span className="text-xs font-medium text-gray-600 dark:text-gray-400">
                      24/7 Support
                    </span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </>
  );
}
























import { useEffect, useRef, useState } from "react";
import { useDispatch } from "react-redux";
import { VehicleList_Action } from "../store/VehicleSlice";
import { useNavigate } from "react-router-dom";
import PickDropTime from "./PickDropTime";
import { toast } from "react-toastify";
export default function Available_Rides() {
  const navigate = useNavigate();
  const dispatch = useDispatch();
  const [minDate, setMinDate] = useState("");
  const [maxDate, setMaxDate] = useState("");
  const [pickUpTime, setpickUptime] = useState<string>("05:00 AM");
  const [dropOffTime, setDropOfftime] = useState<string>("05:00 AM");
  const [pickUpState, setPickUpState] = useState<boolean>(false);
  const [dropOffState, setDropOffState] = useState<boolean>(false);
  const pickupRef = useRef(null);
  const dropoffRef = useRef(null);
  const pickUpDate = useRef("");
  const dropOffDate = useRef("");
  // Calculate allowed booking dates
  const [minDropDate, setMindropdate] = useState("");
  useEffect(() => {
    const today = new Date();

    // Minimum: today
    const min = new Date(today);

    // Maximum: 7 days from today
    const max = new Date(today);
    max.setDate(today.getDate() + 45);

    // Format YYYY-MM-DD for input
    const formatDate = (d: Date) => d.toISOString().split("T")[0];

    setMinDate(formatDate(min));
    setMindropdate(formatDate(min));
    setMaxDate(formatDate(max));
    // setMindropdate(minDate);
    // console.log("mindate", minDate);
    // console.log("mindate", minDate);
    // console.log("dropdaate", minDropDate);
  }, []);
  const fadeInUpClasses = `opacity-0  animate-fadeInUp animation-fill-forwards`;
  const searchBikeHandler = () => {
    console.log("hiii", pickUpDate.current.value);
    const date = new Date(`1970-01-01 ${pickUpTime}`);
    const hrsPickUp24 = date.toLocaleTimeString("en-GB", {
      hour: "2-digit",
      minute: "2-digit",
    });
    const date2 = new Date(`1970-01-01 ${dropOffTime}`);
    const hrsDropOff24 = date2.toLocaleTimeString("en-GB", {
      hour: "2-digit",
      minute: "2-digit",
    });
    const pickup = new Date(`${pickUpDate.current.value}T${hrsPickUp24}`);
    const dropoff = new Date(`${dropOffDate.current.value}T${hrsDropOff24}`);
    // Get difference in milliseconds
    console.log("pickup", pickup);
    console.log("dropof", dropoff);
    const durationMs = dropoff.getTime() - pickup.getTime();
    // Convert to hours
    const durationHours = durationMs / (1000 * 60 * 60);
    if (durationHours < 4) {
      console.log("yes");
      toast.warn("Minimum 4 hours required");
      return;
    } else {
      console.log("no");
    }
    // Check if duration is greater than 4 hours
    // return durationHours > 4;
    console.log(durationHours);
    // console.log("date1", date, "date2", date2);
    // console.log("new", hrsPickUp24);
    // console.log("new", hrsDropOff24);
    const times = {
      pickUpDate: pickUpDate.current.value,
      dropOffDate: dropOffDate.current.value,
      pickUpTime: hrsPickUp24,
      dropOffTime: hrsDropOff24,
    };
    console.log("newHere", times);
    dispatch(VehicleList_Action.addingAvailableBikes(times));
    navigate("/available-vahicles", { state: times });
  };
  // Generate time slots (5AM - 10PM)
  // setMindropdate(minDate);
  // console.log("minDate", minDate);
  return (
    <div className={`relative bg-gray-50 ${fadeInUpClasses}`}>
      {/* Background */}
      <div className="absolute animate-bgSlide bg-cover bg-center  inset-0">
        {/* <img
          src={images[currentIndex]}
          alt="Road background"
          className="w-full h-full object-cover  transition-opacity  duration-1000 ease-in-out"
        /> */}
        <div className="absolute inset-0 bg-gradient-to-r from-white/90 via-white/70 to-transparent" />
      </div>
      {/* Content */}
      <div className="relative max-w-7xl mx-auto px-6 py-16 grid md:grid-cols-2 items-center gap-8 ">
        {/* Left Side */}
        <div>
          <h1 className="text-4xl font-bold text-gray-900 leading-tight">
            Ride Easy.Ride Now
          </h1>
          <p className="mt-4 text-gray-700 text-lg">
            Premium vehicles, easy booking, and trusted service <br />
            â€”ready when you are.
          </p>
          {/* Booking Form */}
          <div
            className={`mt-15 bg-white rounded-xl shadow-lg p-6 w-full max-w-md opacity-[0.7] md:opacity-[1] dark:bg-gray-900 dark:text-gray-700 text-gray-700  ${fadeInUpClasses}`}
          >
            {/* Location */}
            <label className="block text-gray-800 font-semibold mb-1 dark:text-gray-500">
              Pickup Location
            </label>
            <input
              type="text"
              value="Pithoragarh"
              readOnly
              className="w-full mb-4 px-3 py-2 border rounded-lg bg-white-100 dark:bg-gray-300 cursor-not-allowed text-gray-700"
            />
            <div className="grid grid-cols-2 gap-4">
              {/* Pickup Date */}
              <div>
                <label className="block  font-medium mb-1">Pickup Date</label>
                <input
                  type="date"
                  min={minDate}
                  ref={pickUpDate}
                  max={maxDate}
                  onKeyDown={(e) => e.preventDefault()}
                  onChange={() => setMindropdate(pickUpDate.current.value)}
                  className="w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 dark:bg-gray-300 focus:ring-orange-500"
                />
              </div>
              {/* Drop-off Date (no restriction) */}
              <div>
                <label className="block  font-medium mb-1">Drop-off Date</label>
                <input
                  type="date"
                  ref={dropOffDate}
                  min={minDropDate}
                  onKeyDown={(e) => e.preventDefault()}
                  className="w-full px-3 py-2 border rounded-lg focus:outline-none dark:bg-gray-300  focus:ring-2 focus:ring-orange-500"
                />
              </div>
              <PickDropTime
                setpickUptime={setpickUptime}
                setPickUpState={setPickUpState}
                pickUpState={pickUpState}
                pickUpTime={pickUpTime}
                pickupRef={pickupRef}
                dropoffRef={dropoffRef}
                dropOffState={dropOffState}
                dropOffTime={dropOffTime}
                setDropOfftime={setDropOfftime}
                setDropOffState={setDropOffState}
              ></PickDropTime>
              {/* Button */}
              <button
                onClick={() => searchBikeHandler()}
                className="mt-6 col-span-2 w-full bg-orange-600 hover:bg-orange-600 dark:bg-yellow-600 dark:hover:bg-yellow-700 text-white py-3 rounded-lg font-semibold md:bg-orange-500"
              >
                Search Available Bikes
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
