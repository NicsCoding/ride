// // Main Slider Component
import React, { useState, useEffect, useCallback } from "react";

// Sample testimonials data
const testimonials = [
  {
    username: "Sarah",
    feedback:
      "An incredibly easy process and amazing bikes. Highly recommended!",
    avatar:
      "https://images.unsplash.com/photo-1438761681033-6461ffad8d80?auto=format&fit=facearea&w=256&q=80",
  },
  {
    username: "John",
    feedback: "Service was quick, transparent, and the staff was friendly!",
    avatar: "https://randomuser.me/api/portraits/men/32.jpg",
  },
  {
    username: "Priya",
    feedback: "Loved the website design, booking was so easy.",
    avatar: "https://randomuser.me/api/portraits/women/44.jpg",
  },
  {
    username: "Michael",
    feedback: "Top-notch experience with great bikes!",
    avatar: "https://randomuser.me/api/portraits/men/44.jpg",
  },
];

// Testimonial Card component
function TestimonialCard({ testimonial, isActive }) {
  return (
    <div
      className={`flex flex-col items-center px-8 py-10 rounded-3xl bg-white dark:bg-gray-800 shadow-lg transition-transform duration-500 ease-in-out ${
        isActive
          ? "scale-105 border-yellow-400 border-4"
          : "scale-95 opacity-70 border-transparent"
      } w-full`}
    >
      <img
        src={testimonial.avatar}
        alt={testimonial.username}
        loading="lazy"
        className="w-24 h-24 rounded-full border-4 border-yellow-400 shadow-md mb-8"
      />
      <p className="italic text-center text-lg mb-8 font-serif text-gray-700 dark:text-gray-200 leading-relaxed">
        "{testimonial.feedback}"
      </p>
      <div className="font-bold text-2xl text-yellow-600 dark:text-yellow-400 mb-1">
        {testimonial.username}
      </div>
      <div className="text-sm text-gray-400 dark:text-gray-500">
        Verified User
      </div>
    </div>
  );
}

// Main Slider Component
export default function ResponsiveTestimonialSlider() {
  const [active, setActive] = useState(0);

  // Auto slide every 4.5 seconds
  useEffect(() => {
    const interval = setInterval(() => {
      setActive((prev) => (prev + 1) % testimonials.length);
    }, 4500);
    return () => clearInterval(interval);
  }, []);

  const prevSlide = useCallback(() => {
    setActive((prev) => (prev === 0 ? testimonials.length - 1 : prev - 1));
  }, []);

  const nextSlide = useCallback(() => {
    setActive((prev) => (prev + 1) % testimonials.length);
  }, []);

  // Calculate adjacent indexes
  const prevIndex = (active - 1 + testimonials.length) % testimonials.length;
  const nextIndex = (active + 1) % testimonials.length;

  return (
    <section className="w-full min-h-screen bg-gradient-to-br from-yellow-50 to-amber-100 dark:from-gray-900 dark:to-yellow-900 flex flex-col justify-center py-28 px-4 md:px-12">
      <h2 className="text-center text-5xl font-extrabold md:text-6xl font-serif text-yellow-700 dark:text-yellow-400 drop-shadow-md mb-20 select-none">
        What Our Customers Say
      </h2>

      <div className="flex justify-center items-center gap-6 w-full max-w-7xl mx-auto px-2">
        {/* Previous card: hidden on small screens */}
        <div className="hidden md:flex flex-1 max-w-sm justify-end">
          <TestimonialCard
            testimonial={testimonials[prevIndex]}
            isActive={false}
          />
        </div>

        {/* Active card: fills width on mobile */}
        <div className="flex-1 max-w-lg w-full mx-auto">
          <TestimonialCard testimonial={testimonials[active]} isActive={true} />
        </div>

        {/* Next card: hidden on small screens */}
        <div className="hidden md:flex flex-1 max-w-sm justify-start">
          <TestimonialCard
            testimonial={testimonials[nextIndex]}
            isActive={false}
          />
        </div>
      </div>

      {/* Navigation Buttons */}
      <div className="mt-20 flex justify-center items-center gap-16">
        <button
          onClick={prevSlide}
          aria-label="Previous testimonial"
          className="rounded-full px-8 py-4 bg-yellow-500 hover:bg-yellow-400 text-white font-semibold shadow-lg transition-transform hover:scale-110 focus:outline-none focus:ring-4 focus:ring-yellow-300 dark:focus:ring-yellow-500"
        >
          ← Prev
        </button>
        <button
          onClick={nextSlide}
          aria-label="Next testimonial"
          className="rounded-full px-8 py-4 bg-yellow-500 hover:bg-yellow-400 text-white font-semibold shadow-lg transition-transform hover:scale-110 focus:outline-none focus:ring-4 focus:ring-yellow-300 dark:focus:ring-yellow-500"
        >
          Next →
        </button>
      </div>

      {/* Pagination Dots */}
      <div className="flex justify-center gap-8 mt-20">
        {testimonials.map((_, idx) => (
          <button
            key={idx}
            aria-label={`Go to testimonial ${idx + 1}`}
            onClick={() => setActive(idx)}
            className={`w-6 h-6 rounded-full border-2 border-yellow-400 transition-all duration-300 ${
              active === idx
                ? "bg-gradient-to-tr from-yellow-400 to-amber-500 scale-125 shadow-lg animate-pulse"
                : "bg-yellow-200 dark:bg-yellow-700"
            }`}
          />
        ))}
      </div>
    </section>
  );
}



// this one 
import React, { useState, useEffect } from "react";
import axios from "axios";

const TOTAL_PAGES = 4;

const CustomerReview = () => {
  const [feedback, setFeedback] = useState([]);
  const [current, setCurrent] = useState(0);

  // Fetch all feedback once for simple demonstration; adapt as needed for paginated API
  useEffect(() => {
    axios
      .get(`http://localhost:5000/api/get/users/feedback?page=1`)
      .then((res) => setFeedback(res.data || []));
  }, []);

  // Helpers for previous and next cards with wrap around
  const prevIdx = (current - 1 + feedback.length) % feedback.length;
  const nextIdx = (current + 1) % feedback.length;

  // Dot click handler
  const goTo = (idx) => setCurrent(idx);

  return (
    <div className="min-h-screen flex flex-col justify-center items-center w-full bg-gradient-to-br from-[#181c2b] to-[#8f5625] py-16 px-4">
      <h2 className="text-center text-[3rem] lg:text-[4rem] font-bold mb-12 text-yellow-400 font-serif drop-shadow-xl">
        What Our Customers Say
      </h2>
      <div className="flex justify-center items-center w-full gap-8 mb-12">
        {/* Previous Card */}
        {feedback.length > 0 && (
          <div className="max-w-sm w-full bg-[#242a38] rounded-2xl flex flex-col items-center text-center p-8 shadow-lg">
            <div className="mb-6">
              <img
                src={feedback[prevIdx]?.avatar}
                alt={feedback[prevIdx]?.username}
                className="w-20 h-20 rounded-full border-4 border-yellow-400 mx-auto object-cover"
              />
            </div>
            <p className="text-gray-300 italic text-lg mb-6 leading-relaxed">
              "{feedback[prevIdx]?.feedback}"
            </p>
            <div className="font-bold text-yellow-400 text-xl">
              {feedback[prevIdx]?.username}
            </div>
            <div className="text-sm text-gray-400">Verified User</div>
          </div>
        )}

        {/* Center (Active) Card */}
        {feedback.length > 0 && (
          <div className="max-w-md w-full bg-[#242a38] rounded-2xl flex flex-col items-center text-center p-10 shadow-lg border-4 border-yellow-400">
            <div className="mb-8">
              <img
                src={feedback[current]?.avatar}
                alt={feedback[current]?.username}
                className="w-20 h-20 rounded-full border-4 border-yellow-400 mx-auto object-cover"
              />
            </div>
            <p className="text-white italic text-xl mb-6 leading-relaxed font-serif">
              "{feedback[current]?.feedback}"
            </p>
            <div className="font-bold text-yellow-400 text-2xl">
              {feedback[current]?.username}
            </div>
            <div className="text-sm text-gray-300">Verified User</div>
          </div>
        )}

        {/* Next Card */}
        {feedback.length > 0 && (
          <div className="max-w-sm w-full bg-[#242a38] rounded-2xl flex flex-col items-center text-center p-8 shadow-lg">
            <div className="mb-6">
              <img
                src={feedback[nextIdx]?.avatar}
                alt={feedback[nextIdx]?.username}
                className="w-20 h-20 rounded-full border-4 border-yellow-400 mx-auto object-cover"
              />
            </div>
            <p className="text-gray-300 italic text-lg mb-6 leading-relaxed">
              "{feedback[nextIdx]?.feedback}"
            </p>
            <div className="font-bold text-yellow-400 text-xl">
              {feedback[nextIdx]?.username}
            </div>
            <div className="text-sm text-gray-400">Verified User</div>
          </div>
        )}
      </div>

      {/* Navigation buttons */}
      <div className="flex gap-6 mb-8">
        <button
          className="bg-yellow-400 hover:bg-yellow-500 text-black font-bold px-6 py-3 rounded-xl shadow-md text-lg"
          onClick={() => setCurrent(prevIdx)}
        >
          ← Prev
        </button>
        <button
          className="bg-yellow-400 hover:bg-yellow-500 text-black font-bold px-6 py-3 rounded-xl shadow-md text-lg"
          onClick={() => setCurrent(nextIdx)}
        >
          Next →
        </button>
      </div>

      {/* Navigation Dots */}
      <div className="flex gap-6">
        {feedback.map((_, idx) => (
          <button
            key={idx}
            className={`w-6 h-6 rounded-full transition-all duration-200 ${
              current === idx
                ? "bg-yellow-400 shadow-xl scale-125"
                : "bg-yellow-700 opacity-70"
            }`}
            onClick={() => goTo(idx)}
            aria-label={`Go to testimonial ${idx + 1}`}
          />
        ))}
      </div>
    </div>
  );
};

export default CustomerReview;





// Last one 

import React, { useEffect, useState, useRef } from "react";
import axios from "axios";

const TOTAL_PAGES = 4;

const CustomerReview = () => {
  const [feedback, setFeedback] = useState([]);
  const [current, setCurrent] = useState(0);
  const intervalRef = useRef();

  // Fetch all feedback on mount (use paginated endpoint if you want)
  useEffect(() => {
    console.log("hi");
    const fetching = async () => {
      const res = await axios
        .get(`http://localhost:5000/api/get/users/feedback`)
        .then((res) => {
          setFeedback(res.data || []);
        });
      console.log("res", res);
    };
    fetching();
  }, []);

  // Autoplay every 3500ms
  useEffect(() => {
    intervalRef.current = setInterval(() => {
      setCurrent((prev) => (prev + 1) % feedback.length);
    }, 3500);
    return () => clearInterval(intervalRef.current);
  }, [feedback.length]);

  // Prev/Next handlers
  const prevCard = () =>
    setCurrent((prev) => (prev - 1 + feedback.length) % feedback.length);
  const nextCard = () => setCurrent((prev) => (prev + 1) % feedback.length);

  // Card indexes for prev/center/next
  const prevIdx = (current - 1 + feedback.length) % feedback.length;
  const nextIdx = (current + 1) % feedback.length;

  return (
    <div className="min-h-screen flex flex-col justify-center items-center w-full bg-gradient-to-br from-[#181c2b] to-[#8f5625] py-14 px-0 sm:px-6">
      {/* Header */}
      <h2 className="text-center text-[2.7rem] sm:text-[3rem] md:text-[4rem] font-bold mb-12 text-yellow-400 font-serif drop-shadow-xl">
        What Our Customers Say
      </h2>
      <div className="w-full flex justify-center items-stretch gap-8 mb-12">
        {/* Prev card (desktop only) */}
        <div className="hidden md:flex max-w-md w-full bg-[#242a38] rounded-2xl flex-col items-center text-center p-8 shadow-lg justify-between">
          {feedback.length > 0 && (
            <>
              <img
                src={feedback[prevIdx]?.avatar}
                alt={feedback[prevIdx]?.username}
                className="w-20 h-20 rounded-full border-4 border-yellow-400 mb-7 object-cover"
              />
              <p className="text-gray-300 italic text-lg mb-6 leading-relaxed">
                "{feedback[prevIdx]?.feedback}"
              </p>
              <div className="font-bold text-yellow-400 text-xl">
                {feedback[prevIdx]?.username}
              </div>
              <div className="text-sm text-gray-400">Verified User</div>
            </>
          )}
        </div>

        {/* Center card (always visible, highlighted) */}
        <div className="max-w-lg w-full bg-[#242a38] rounded-2xl flex flex-col items-center text-center p-10 shadow-xl border-4 border-yellow-400 md:mx-0 mx-auto">
          {feedback.length > 0 && (
            <>
              <img
                src={feedback[current]?.avatar}
                alt={feedback[current]?.username}
                className="w-24 h-24 rounded-full border-4 border-yellow-400 mb-8 object-cover"
              />
              <p className="text-white italic font-serif text-xl mb-7 leading-relaxed">
                "{feedback[current]?.feedback}"
              </p>
              <div className="font-bold text-yellow-400 text-2xl mb-1">
                {feedback[current]?.username}
              </div>
              <div className="text-sm text-gray-300">Verified User</div>
            </>
          )}
        </div>

        {/* Next card (desktop only) */}
        <div className="hidden md:flex max-w-md w-full bg-[#242a38] rounded-2xl flex-col items-center text-center p-8 shadow-lg justify-between">
          {feedback.length > 0 && (
            <>
              <img
                src={feedback[nextIdx]?.avatar}
                alt={feedback[nextIdx]?.username}
                className="w-20 h-20 rounded-full border-4 border-yellow-400 mb-7 object-cover"
              />
              <p className="text-gray-300 italic text-lg mb-6 leading-relaxed">
                "{feedback[nextIdx]?.feedback}"
              </p>
              <div className="font-bold text-yellow-400 text-xl">
                {feedback[nextIdx]?.username}
              </div>
              <div className="text-sm text-gray-400">Verified User</div>
            </>
          )}
        </div>
      </div>

      {/* Navigation Buttons */}
      <div className="flex gap-10 mb-10 justify-center">
        <button
          className="bg-yellow-400 hover:bg-yellow-500 text-black font-bold px-8 py-4 rounded-full shadow-md text-lg transition"
          onClick={prevCard}
        >
          ← Prev
        </button>
        <button
          className="bg-yellow-400 hover:bg-yellow-500 text-black font-bold px-8 py-4 rounded-full shadow-md text-lg transition"
          onClick={nextCard}
        >
          Next →
        </button>
      </div>

      {/* Dot Navigation */}
      <div className="flex gap-6 mb-2">
        {feedback.map((_, idx) => (
          <button
            key={idx}
            className={`w-6 h-6 rounded-full transition-all duration-200 ${
              current === idx
                ? "bg-yellow-400 shadow-xl scale-125"
                : "bg-yellow-700 opacity-70"
            }`}
            onClick={() => setCurrent(idx)}
            aria-label={`Go to testimonial ${idx + 1}`}
          />
        ))}
      </div>
    </div>
  );
};

export default CustomerReview;



import { useEffect } from "react";

const PickDropTime = ({
  setpickUptime,
  pickUpTime,
  setPickUpState,
  pickUpState,
  pickupRef,
  dropoffRef,
  dropOffTime,
  setDropOfftime,
  dropOffState,
  setDropOffState,
}) => {
  useEffect(() => {
    function handleClickOutside(e) {
      if (pickupRef.current && !pickupRef.current.contains(e.target)) {
        setPickUpState(false);
      }
      if (dropoffRef.current && !dropoffRef.current.contains(e.target)) {
        setDropOffState(false);
      }
    }

    document.addEventListener("click", handleClickOutside);
    return () => document.removeEventListener("click", handleClickOutside);
  }, []);
  const generateTimeOptions = () => {
    const times = [];
    const start = 5;
    const end = 22;

    for (let h = start; h <= end; h++) {
      for (let m of ["00", "30"]) {
        if (h === end && m !== "00") continue;
        const hour12 = h % 12 === 0 ? 12 : h % 12;
        const ampm = h < 12 ? "AM" : "PM";
        times.push(`${hour12.toString().padStart(2, "0")}:${m} ${ampm}`);
      }
    }
    return times;
  };
  const timeOptions = generateTimeOptions();
  return (
    <>
      {/* Pickup Time */}
      <div>
        <label className="block font-medium mb-1">Pickup Time</label>
        {/* Select box */}
        <div ref={pickupRef} className="relative w-full">
          <div
            className="w-full px-3 py-2 border rounded-lg focus:ring-2 dark:bg-gray-300 focus:ring-orange-500 cursor-pointer select-none"
            onClick={() => setPickUpState((prev) => !prev)}
            tabIndex={0}
            onKeyDown={(e) => {
              if (e.key === "Enter" || e.key === " ") {
                e.preventDefault();
                setPickUpState((prev) => !prev);
              }
            }}
            aria-haspopup="listbox"
            aria-expanded={pickUpState}
            role="button"
          >
            {pickUpTime || "Select time"}
          </div>{" "}
          <div
            className={`absolute mt-1 w-full max-h-48 overflow-y-auto bg-white dark:bg-gray-300 border rounded-lg shadow-lg z-10 transition-all duration-300 ease-in-out origin-top transform ${
              pickUpState
                ? "opacity-100 scale-y-100 pointer-events-auto"
                : "opacity-0 scale-y-0 pointer-events-none"
            }`}
            role="listbox"
            tabIndex={-1}
          >
            {timeOptions.map((time, idx) => (
              <div
                key={idx}
                className={`px-4 py-2 cursor-pointer select-none ${
                  pickUpTime === time
                    ? "bg-yellow-500 text-white"
                    : "hover:bg-gray-200 dark:hover:bg-gray-400"
                }`}
                onClick={() => {
                  setpickUptime(time);
                  setPickUpState(false);
                }}
                role="option"
                aria-selected={pickUpTime === time}
                tabIndex={0}
                onKeyDown={(e) => {
                  if (e.key === "Enter" || e.key === " ") {
                    e.preventDefault();
                    setpickUptime(time);
                    setPickUpState(false);
                  }
                }}
              >
                {time}
              </div>
            ))}
          </div>
        </div>
      </div>
      {/* Drop-off Time (no restriction) */}

      <div>
        <label className="block font-medium mb-1">Drop-off Time</label>
        <div className="relative w-full" ref={dropoffRef}>
          {/* Select box */}
          <div
            className="w-full px-3 py-2 border rounded-lg focus:ring-2 dark:bg-gray-300 focus:ring-orange-500 cursor-pointer select-none"
            onClick={() => setDropOffState((prev) => !prev)}
            tabIndex={0} // make div focusable for accessibility
            onKeyDown={(e) => {
              if (e.key === "Enter" || e.key === " ") {
                e.preventDefault();
                setDropOffState((prev) => !prev);
              }
            }}
            aria-haspopup="listbox"
            aria-expanded={dropOffState}
            role="button"
          >
            {dropOffTime || "Select time"}
          </div>

          {/* Dropdown with smooth transition */}
          <div
            className={`absolute mt-1 w-full max-h-48 overflow-y-auto bg-white dark:bg-gray-300 border rounded-lg shadow-lg z-10 transition-all duration-300 ease-in-out origin-top transform ${
              dropOffState
                ? "opacity-100 scale-y-100 z-1000 pointer-events-auto "
                : "opacity-0 scale-y-0 pointer-events-none"
            }`}
            role="listbox"
            tabIndex={-1}
          >
            {timeOptions.map((time, idx) => (
              <div
                key={idx}
                className={`px-4 py-2 cursor-pointer select-none ${
                  dropOffTime === time
                    ? "bg-yellow-500 text-white"
                    : "hover:bg-gray-200 dark:hover:bg-gray-400"
                }`}
                onClick={() => {
                  setDropOfftime(time);
                  setDropOffState(false);
                }}
                role="option"
                aria-selected={dropOffTime === time}
                tabIndex={0}
                onKeyDown={(e) => {
                  if (e.key === "Enter" || e.key === " ") {
                    e.preventDefault();
                    setDropOfftime(time);
                    setDropOffState(false);
                  }
                }}
              >
                {time}
              </div>
            ))}
          </div>
        </div>
      </div>
    </>
  );
};
export default PickDropTime;
